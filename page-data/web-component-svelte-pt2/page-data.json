{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/web-component-svelte-pt2/",
    "result": {"data":{"site":{"siteMetadata":{"title":"jinwood.github.io"}},"markdownRemark":{"id":"e8de1725-917f-5c1c-8452-f31c389652af","excerpt":"Now that we have our basic project scaffolded out, we can make a start. First, we need to tidy up the initial files the svelte script gave us: Remove  directoryâ€¦","html":"<p>Now that we have our basic project scaffolded out, we can make a start.</p>\n<p>First, we need to tidy up the initial files the svelte script gave us:</p>\n<ul>\n<li>Remove <code class=\"language-text\">routes</code> directory</li>\n<li>Remove <code class=\"language-text\">app.html</code> from <code class=\"language-text\">./src</code></li>\n<li>Create <code class=\"language-text\">App.svelte</code> and <code class=\"language-text\">main.ts</code> in <code class=\"language-text\">./src</code></li>\n<li>Create a <code class=\"language-text\">public</code> directory and add an <code class=\"language-text\">index.html</code> file</li>\n</ul>\n<p>We now have the filestructure needed to create a very simple custom element! Next we need to tell the Svelete compiler to output a custom element rather than a svelet app.</p>\n<p>To do this, open <code class=\"language-text\">svelte.config.js</code> modify the <code class=\"language-text\">config</code> object, adding a new <code class=\"language-text\">compilerOptions</code> property:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  const config = {\n      // stuff\n        compilerOptions: {\n            customElements: true,\n        },\n      // more stuff\n  }</code></pre></div>\n<p>Remove whatever is in the <code class=\"language-text\">kit</code> property and fill with:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">kit: {\n    files: {\n        template:\n    }\n}</code></pre></div>\n<p>Now, we can add a basic component and render it in <code class=\"language-text\">index.html</code>.</p>\n<p>In <code class=\"language-text\">App.svelte</code>, add the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!-- The \"tag\" property here is what we use render our element in HTML -->\n&lt;svelte:options tag=\"my-component\" />\n\n&lt;script lang=\"ts\">\n\tlet count: number = 0;\n\tconst increment = () => {\n\t\tcount += 1;\n\t};\n&lt;/script>\n\n&lt;button on:click={increment}>\n\tClicks: {count}\n&lt;/button></code></pre></div>\n<p>We will be rendering a simple button &#x26; counter to prove that our component will render.</p>\n<p>Add this code to <code class=\"language-text\">./src/main.ts</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export { default as App } from './App.svelte';</code></pre></div>\n<p>Next, add the following to <code class=\"language-text\">./public/index.html</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n  &lt;head>\n    &lt;meta charset=\"UTF-8\" />\n    &lt;link rel=\"icon\" href=\"/favicon.ico\" />\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    &lt;title>Spotify Top Artists&lt;/title>\n  &lt;/head>\n  &lt;body>\n    &lt;my-component>&lt;/my-component>\n    &lt;script type=\"module\" src=\"/src/main.ts\">&lt;/script>\n  &lt;/body>\n&lt;/html></code></pre></div>","frontmatter":{"title":"Building a web component with Svelte (pt2)","date":"November 09, 2021","description":"Svelte Web Components - building out the project"}},"previous":null,"next":null},"pageContext":{"id":"e8de1725-917f-5c1c-8452-f31c389652af","previousPostId":null,"nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}