{"version":3,"sources":["webpack:///./src/components/seo/index.tsx","webpack:///./node_modules/react-bootstrap/esm/Jumbotron.js","webpack:///./src/components/profile-image.tsx","webpack:///./src/components/post-link.tsx","webpack:///./src/pages/index.tsx"],"names":["SEO","props","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Jumbotron","forwardRef","_ref","ref","_classes","_ref$as","as","Component","className","fluid","bsPrefix","classes","createElement","displayName","ProfileImage","data","placeholderImage","childImageSharp","PostLink","post","to","frontmatter","path","date","pageQuery","IndexPage","edges","allMarkdownRemark","Posts","filter","edge","node","map","key","id","Row","Col","md","sm","href","target","rel","size"],"mappings":"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","file":"component---src-pages-index-tsx-290215ac7548bcd3db45.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\ntype Props = {\n  description: string;\n  lang: string;\n  meta: Array<any>;\n  title: string;\n};\n\nconst SEO = (props: Props) => {\n  const { description, lang, meta, title } = props;\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n};\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nexport default SEO;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  fluid: false\n};\nvar Jumbotron = React.forwardRef(function (_ref, ref) {\n  var _classes;\n\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      fluid = _ref.fluid,\n      bsPrefix = _ref.bsPrefix,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"className\", \"fluid\", \"bsPrefix\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'jumbotron');\n  var classes = (_classes = {}, _classes[bsPrefix] = true, _classes[bsPrefix + \"-fluid\"] = fluid, _classes);\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, classes)\n  }));\n});\nJumbotron.defaultProps = defaultProps;\nJumbotron.displayName = 'Jumbotron';\nexport default Jumbotron;","import React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst ProfileImage = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"me@0.5x.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 300) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <Img\n      className=\"rounded mb-3\"\n      fluid={data.placeholderImage.childImageSharp.fluid}\n    />\n  );\n};\n\nexport default ProfileImage;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst PostLink = ({ post }: any) => (\n  <div className=\" \">\n    <div>\n      <h2 className=\"post-title\">\n        <Link to={post.frontmatter.path} className=\"post-link\">\n          {post.frontmatter.title}\n        </Link>\n      </h2>\n      <div className=\"post-meta\">{post.frontmatter.date}</div>\n    </div>\n  </div>\n);\nexport default PostLink;\n","import React from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { MarkGithubIcon, MailIcon } from \"@primer/octicons-react\";\nimport { graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport ProfileImage from \"../components/profile-image\";\nimport PostLink from \"../components/post-link\";\n\ninterface IProps {\n  data: any;\n  allMarkdownRemark: { edges: any };\n}\n\nconst IndexPage = ({\n  data: {\n    site,\n    allMarkdownRemark: { edges },\n  },\n}: IProps) => {\n  // console.log(edges);\n\n  let Posts = [];\n  if (edges) {\n    Posts = edges\n      .filter((edge: any) => !!edge.node.frontmatter.date)\n      .map((edge: any) => <PostLink key={edge.node.id} post={edge.node} />);\n  }\n  return (\n    <Layout>\n      <Row>\n        <Col md={8} sm={12}>\n          <Jumbotron className=\"p-3\">\n            <SEO title=\"Home\" />\n            <Row>\n              <Col md={4}>\n                <ProfileImage />\n              </Col>\n              <div className=\"col align-self-center\">\n                <Row className=\"\">\n                  <h3>Nerd, tech enthusiast and self taught web developer.</h3>\n                </Row>\n              </div>\n            </Row>\n            <p>\n              I've been working in web development since 2013, where I began my\n              career building web apps with ASP.Net web forms. Since then I've\n              built APIs, mobile apps, caseworking software, telephony\n              interfaces, and recently PWAs. I originally focused on the\n              Microsoft tech stack, but now my passion is in open source\n              technology and UNIX operating systems. My work laptop is a Mac,\n              but I use Linux at home. I'm passionate about the web, online\n              privacy, and technology in general.\n            </p>\n            <p>\n              Recently I've been working with react.js, flow, redux and graphql\n              but I am interested in any and all web stacks.\n            </p>\n\n            <p>\n              Outside of work, I practise Brazillian Jiu-Jitsu, listen to a ton\n              of music and play video games.\n            </p>\n          </Jumbotron>\n        </Col>\n        <Col>\n          <Jumbotron>\n            <Col className=\"d-flex justify-content-around\">\n              <a\n                href=\"https://github.com/jinwood/\"\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                <MarkGithubIcon size={24} />\n              </a>\n              <a href=\"mailto:jinw@protonmail.com\">\n                <MailIcon size={24} />\n              </a>\n            </Col>\n          </Jumbotron>\n          <Jumbotron>\n            <div className=\"row\">\n              <div className=\"col\">\n                <p>Recent Posts</p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col\">{Posts}</div>\n            </div>\n          </Jumbotron>\n        </Col>\n      </Row>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\nexport const pageQuery = graphql`\n  query indexPageQuery {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n            thumbnail\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}